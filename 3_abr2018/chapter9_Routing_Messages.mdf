2018/05/15:::::::::::::::::::ROUTING MESSAGES::::::::::::::::

Routers are essential when you want to scale up or out.


9.1 The enterprise integration router pattern:::::::::::::::
Un router es capaz de ENVIAR MENSAJES hacia diferentes flujos o tareas,es decir que la idea del patrón se trata de construir lógica para determinar haca donde
se debe enrrutar un mensaje, por la siguinetes razones:

1) Performance: Debido a que una tarea toma demasiado tiempo PERO los mensajes pueden ser ejecutados en paralelo, no depende uno de otro (eje consultar el score crediticio de una persona es un mensaje y de otra es un mensaje toalmente diferente 
)

2) Contenido del mensaje: El mensaje tiene un atributo que dependiendo de su valor debe ir a una tara u otra.

3) Estado de router: Sí el router está en un estado x (espera, sleeping,caído) debe ir a otro flujo, de lo contratrio se procesa normalmente.


El set de tareas a las cuales un Router puede enviar mensajes se conoce como "routees" en akka.

recordar que el principal motivo de routing es por LA NECESIDAD DE ESCALAR


:::::::9.2 Balance load using Akka routers:::::::::::::::::::::::::::::::
> One of the reasons to use a router is to balance the load over different actors,
PARA MEJORA de performcane, Local (scale up) o remoto(scale out)

Implementación:
Router: Contiene la logica de enrrutamiento 
RouterActor: El actor que representa el Router

see figure 9.2 pg 190R

Tipo de Routers:
> Pool: It manages the routees (crear y eliminarlos conforme van terminando su ejecución), util cuando los routees son creados y distribuidos de la
misma forma y la RECUPERACION de los routees no es una prioridad.
> Group: They dont manage de Routees, los routeess son creados por el sistema y serán localizados mediante el ActorSelection por el Router 
util para un mayor control del ciclo de vida de los routees.
(see figure 9.3)
(pg192--> Table 9.1 List of available routers within Akka)
Los que más se usan son (pero no son los unicos ver la tabla):
round-robin, 
balancing, and consistent hashing(cuando requiero que varios mensajes lleguen al mismo rotee pero no importa cual )

9.2.1 Akka pool router:::::::::::::::

De nuevo util cuando los routees son creados y distribuidos de la
misma forma y la RECUPERACION de los routees no es una prioridad.
Dos formas de crearlo : I) Por configuración(see pg 193 y 194 la explicación)  II) vía código(menos flexible -- Listing 9.3) 



Broadcast messages: Enviar un mensaje a todos los routees de un Router 
El único Router que no funciona con Broadcast messag es el BalancingPool., debido a que todos los routess tienen el mismo mailbox

(see pa 195) Es posible instanciar routess remotos
ClusterRouterPool: Otro Router para crear routess en varios servidores remotos.


DYNAMICALLY RESIZABLE POOL: hasta acá utilizamos cantidades fijas (eg 5) de routees, pero en la vida real la carga aumenta en ciertos meses etc.
(la idea de dinámico es que ni falte ni se desperdicien recursos).
(see pg 197)

Supervision::::
Ojo recordar que el router es el que crea los routees por lo cual a su vez el el SUPERVISOR DE estos. Un routee al fallar lo escala a su supervisor (el Router)
pero como hasta ahora usamos los default Routers lo que va a pasar es que éste va a enviar el error a su supervisor (El mismo sistema o el que creó el Router)
y por ejemplo si este decide reiniciar el actor (si el Router) entonces va a darse el efecto dominó, pues los routees al ser sus hijos se caerán todos también
hay que tener bastante cuidado con esto porque recordemos que al inicio solo fallo un routee no todos (supongamos un ejemplo de un Router y 5 Routees)

CUANDO UN routee termina en Pool el router detecta esto y lo saca, cuando se usa un Group este no lo termina sino que sigue neviando mensajes a este

9.2.2 Akka group router :::::::::::::::::::::::::::::::
Cuando se requiere más flexibilidad y control de los routees, ya que lo anterior , maneja los routees por NOSOTROS. Acá ya no se le pasa un numero de
routess sino el listado de estos (ver Listing 9.6 GetLicenseCreator creating our routees)


class GetLicenseCreator(nrActors: Int) extends Actor {
override def preStart() {
super.preStart()
(0 until nrActors).map { nr =>
context.actorOf(Props[GetLicense], "GetLicense"+nr)
system.actorOf(Props( new GetLicenseCreator(2)),"Creator")
}
}
}
...
}
system.actorOf(Props( new GetLicenseCreator(2)),"Creator")



En el código de la pg 203 cuando hacen router ! GetRoutees, es la manera de que siempre se obtenga los routess que realmente están disponibles
actualmente, sino se hace esto entonces es posible que el router siga enviando mensajes a routees TERMINADOS OJO!! (El "case routees: Routees" es para cumplir
 con lo que decimos en, ya que le llega los routes actuales )
 active.remove(index): Lo que hace es remover los que ESTÁN DISPONIBLES, al final quedan los que ya no están activos o fueron terminado!!

En el  case Terminated(child) => router ! GetRoutee : En este caso  GetRoutee es para evitar 
> Por todas esos pitfalls (trampillas) y trucos que se deben realizar la teoría recomienda no hacerlo (entonces para que lo muestra :( )

9.2.3 ConsistentHashing router :::::::::::::::::::::::::::::::

Que pasa cuando cuando se maneja estados en los routees basado en el mensaque que se recibe, como en gatter and scatter cuando se combinaban los mensajes
Ver(Listing 9.12 Joining two message into one pg 206)

>pg 205 (pasos para mapear mensajes con routees, saber a que routee debe ir un mensaje en especifico) 

::Step 1 translates a message to a message key object.


	>three ways to translate the message into a message key:

	I) A partial function is specified in the router. (UTIL CUANDO EL ROUTER DESEA DISTRIBUIR EL MISMO TIPO DE MENSAJE A VARIOS ROUTEES)
	This makes the decision specific to that router. (see pg 207)
	def hashMapping: ConsistentHashMapping = {
			case msg: GatherMessage => msg.id
		}
	
	II) The message implements akka.routing.ConsistentHashingRouter.Consistent-
	Hashable.(UTIL CUANDO EL kEY DEl mensaje es siempre el mismo)
	This makes the decision specific for the messages used.
		MESSAGE HAS A HASHMAPPING (PG 207)
	
	III) The messages can be wrapped in a akka.routing.ConsistentHashingRouter
	.ConsistentHashableEnvelope.(less preferable, por alto acoplamiento entre el sender y los routees)
	This makes the decision specific for the sender. The sender knows which key
	to use. (UTIL CUANDO SE DESEA QUE LOS EMENSAJES LLEGUEN SIMPRE A UN MISMO ROUTER SIN IMOPORTAR EL SENDER)
	
	SENDER HAS A HASHMAPPING(pg 208): Consiste en enviar un mensaje de tipo ConsistentHashableEnvelope que contiene (envuelve el mensaje real)
	

::Step 2 creates a hash code from this message key.

::Step 3 Map hash code to a virtual node

::Step 4 Map virtual node to a routee: Mapea los routees que gestiona los mensajes para X virtual node 
Por que un virtual Node?: R/ Para la asignacion nequitativa de mensajes sobre los Routees existentes


:::::::::9.3 Implementing the router pattern using actors::::::::::::::::::::::

- iMPLEMENTAR el router pattern pero usando solo Actores


::::::9.3.1 Message OR Content-based routing:::::::::::::::::::::::
De acuerdo al contenido del mansaje (el valor de un atributo o más de éste mensaje) se TOMA LA DECISIÓN  de enrrutar el mensaje a X o Y.

::::::9.3.2 State-based routing:::::::::::::::::::::::
Cambiar el enrrutado basado en el state del Router , no es necesario el uso de Routers sino que con un Actor sencillo y con un atributo de clase que 
represente el estado podemos trabajar.
> Usando become/unbecome para cambiar el comportamiento del actor y decirdir donde enrrutar los mensajes
Ver ejemplos en pg 210 

::::::::9.3.3 Router implementations::::::::::::::::::::::::::::::

Implementar GetSpeed and SpeedRouter into one actor.(pg 211 Figure 9.7)



:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::



