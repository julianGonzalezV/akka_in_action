::::::Your first distributed Akka app:::::::::::::::::::
6.1 Scaling out::

RPC es considerado bloqueante:
Most network technologies use a blocking remote procedure call (RPC)–style

La idea de actores es que no tengamos que modificar nuestro código para empezar a correr en un ambiente distribuido.

terminology:
Node: a running application that communicates
across the network. It’s a connection point in a network topology. It’s part of a
distributed system. Many nodes can run on one server, or they can run on separate
servers

To communicate between nodes some Examples of transport protocols are TCP/IP and UDP.

Protocol data units: It contains a stored representation of the messages as byte arrays.

Las topologías comunes son:
> Local, un solo nodo
> CS, un nodo cliente y otro nodo servidor
> Estrella, un nodo central y los otro nodos worker apuntan a el 
> Ring, anillo un nodo se comunica con el anterior y el siguiente
>  Per to peer / mesh: cada nodo se comunica con todos los nodos de la red 
> Tree, un nodo padre tiene se comunica con sus hijos, un hijo puede tener más hijos


group membership: When nodes are part of the same distributed system It can be:
	1)static: less resilient, a node can’t simply be replaced by another node running on a different network address
	2) dynamic
	
discovery mechanism: When new nodes can find an existing group on
the network, since the network addresses aren’t statically defined
::::::::::::::::::::::::::::::::::::::::::::::::::::::::

:::::::::::::::6.1.2 Reasons for a distributed programming model:

exact opposite: A distributed programming model for both a distributed and a local environment.

:::::::::::::::6.2 Scaling out with remoting:::::::::::::::
Dependencias requeridas:
"com.typesafe.akka" %% "akka-remote" % akkaVersion,
"com.typesafe.akka" %% "akka-multi-node-testkit" % akkaVersion % "test",


sbt update : Para actualizar dependencias


class SimpleActor extends Actor{
  def receive = {
    case m => println(s"aqui el mensaje $m")
  }
}



> Los mensajes son serializados y deserializados entre nodos, tambien se puede tener un serializador personalizado

:::::::::::::::6.2.3 Remote lookup:::::::::::::::



Simply watching an ActorRef will ensure that the
actor gets notified of termination of an actor,


EN RESUMEN LO QUE HACE REMOTE LOOKUPPROOXY es validar si el actor (en este caso del backend user/boxOffice) 
se encuentra disponible (identify) cada 3 segundos sino (porque puede pasar que primero se levantó el front) vuelve e intenta a los 
3 segundos para ver si si está disponible, despues de que se encuentre en un estado disponible lo pasa a un estado Activo y ya sigue recibiendo mensajes 
normal (es un proxy que interviene dichos mensajes ), tambiíen se puede dar que vuelva y no se encuentre disponible, de esta manajera vuelve y cambia su estado a Indentify (ejecutarse cada 3 segundos para validar disponibilidad)

::::::::::::::::::::::::::::::::::::.::::::::::::::::::::::::::::::::::::.

:::::::::::::6.2.4-Remote deployment (el anterior 6.2.3 era remote lookup)::::::::::::::::

Se puede hacer programaticamente , sobretodo si es dinamico
O por archivo de configuración
Ejemplo de archivo de configuración:
actor {
	provider = "akka.remote.RemoteActorRefProvider"
		deployment {
			/boxOffice {
				remote = "akka.tcp://backend@0.0.0.0:2552"
			}
		}
}




En ambos 6.2.4 y 6.2.3 LOS nodos front y backend libremente pueden iniciarsen en cualquier orden.



::::6.2.5 Multi-JVM testing:::::::::::::::::::::::::::::::::::::::::::::::
EL sbt multi-JVM plugin hace posible el correr pruebas a través de multiples JVMs,  ayuda a realizar pruebas sobre actores distribuidos  en diferentes nodos (otro nodo con otra jvm en la vida real) see og 140 real.

val frontend = role("frontend")//los roles se usan para identificar el nodo en la pruebas unitarias






::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::